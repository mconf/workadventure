name: Build, push, test and deploy Docker image

on:
  push:
    branches: [master, develop]
  release:
    types: [created]
  pull_request:
    types: [labeled, synchronize, opened, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-play:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: mconf/workadventure-play

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'build')) }}
        with:
          context: .
          file: play/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: mconf/workadventure-play:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-play:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: play/Dockerfile
          platforms: linux/amd64
          push: false
          tags: mconf/workadventure-play:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-play:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/play.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: play
          path: /tmp/play.tar

  build-chat:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: mconf/workadventure-chat

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'build')) }}
        with:
          context: .
          file: chat/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: mconf/workadventure-chat:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-chat:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: chat/Dockerfile
          platforms: linux/amd64
          push: false
          tags: mconf/workadventure-chat:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-chat:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/chat.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: chat
          path: /tmp/chat.tar

  build-back:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: mconf/workadventure-back

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'build')) }}
        with:
          context: .
          file: back/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: mconf/workadventure-back:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-back:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: back/Dockerfile
          platforms: linux/amd64
          push: false
          tags: mconf/workadventure-back:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-back:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/back.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: back
          path: /tmp/back.tar

  build-uploader:
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: mconf/workadventure-uploader

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'build')) }}
        with:
          file: uploader/Dockerfile
          push: true
          tags: mconf/workadventure-uploader:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-uploader:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          file: uploader/Dockerfile
          push: false
          tags: mconf/workadventure-uploader:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-uploader:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/uploader.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: uploader
          path: /tmp/uploader.tar

  build-maps:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: mconf/workadventure-maps

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'build')) }}
        with:
          context: maps/
          file: maps/Dockerfile
          push: true
          tags: mconf/workadventure-maps:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-maps:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          context: maps/
          file: maps/Dockerfile
          push: false
          tags: mconf/workadventure-maps:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-maps:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/maps.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: maps
          path: /tmp/maps.tar

  build-map-storage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: mconf/workadventure-map-storage

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'build')) }}
        with:
          context: .
          file: map-storage/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: mconf/workadventure-map-storage:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-map-storage:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: map-storage/Dockerfile
          platforms: linux/amd64
          push: false
          tags: mconf/workadventure-map-storage:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-map-storage:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/map-storage.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: map-storage
          path: /tmp/map-storage.tar

  build-ejabberd:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: mconf/workadventure-simple-ecs

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'deploy') || contains(github.event.pull_request.labels.*.name, 'build')) }}
        with:
          context: xmpp/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: mconf/workadventure-simple-ecs:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-simple-ecs:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          context: xmpp/
          platforms: linux/amd64
          push: false
          tags: mconf/workadventure-simple-ecs:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=mconf/workadventure-simple-ecs:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/ejabberd.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ejabberd
          path: /tmp/ejabberd.tar

  end-to-end-tests:
    name: "End to end tests with ${{ matrix.browser }}"
    strategy:
      fail-fast: false
      matrix:
        browser: [ 'chromium', 'firefox', 'webkit' ]
    needs:
      - build-play
      - build-chat
      - build-back
      - build-maps
      - build-uploader
      - build-map-storage
      - build-ejabberd
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies
        run: npm ci
        working-directory: tests
      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}
        working-directory: tests
      - name: 'Setup .env file'
        run: cp .env.template .env
      - uses: rlespinasse/github-slug-action@3.1.0
      - name: Display pulled version
        run: echo "Pulling images with tag ${DOCKER_TAG}"
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}

      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: play
          path: /tmp
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: chat
          path: /tmp
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: back
          path: /tmp
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: maps
          path: /tmp
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: map-storage
          path: /tmp
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: uploader
          path: /tmp
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ejabberd
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/play.tar
          docker load --input /tmp/chat.tar
          docker load --input /tmp/back.tar
          docker load --input /tmp/maps.tar
          docker load --input /tmp/map-storage.tar
          docker load --input /tmp/uploader.tar
          docker load --input /tmp/ejabberd.tar
          docker image ls -a

#      - name: Download images
#        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml pull
#        env:
#s          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Start WorkAdventure
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml up -d
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Wait for environment to Start
        run: sleep 30
      - name: Run Playwright tests
        run: npm run test-prod-like -- --project=${{ matrix.browser }}
        working-directory: tests
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Display docker-compose logs on failure
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml logs
        if: failure()
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Display containers state
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml ps
        if: failure()
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Side-load docker-compose logs in the playwright report
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml logs > tests/playwright-report/docker-compose.log
        if: failure()
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: tests/playwright-report/
          retention-days: 30

